ga.getXML(ajaxProcessor) vs ga.getXMLAnswer(ajaxProcessor);

Location:
    Script Include / New
Name:
    ServiceNow201GlideAjax
Note 1:
    Parts of the script are autogenerated on creation.
Note 2:
    The Udemy Course is a bit outdated, doesn't mention anything about the roles that need to be assigned / can run this script.

Code:
var ServiceNow201GlideAjax = Class.create();
ServiceNow201GlideAjax.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    getIncidentStatus: function() {
        var incidentNumber = this.getParameter('sysparm_incident_number');
        if (!this.getParameter.nil(incidentNumber)) {
            var incidentGR = new GlideRecord('incident');
            incidentGR.get('number', incidentNumber);
            if (!incidentGR.nil()) { // Check if the GlideRecord found the incident
                return incidentGR.state.getDisplayValue();
            } else {
                return 'Incident not found.';
            }
        } else {
            return 'No incident number provided.';
        }
    },

    getLatestIncidents: function() {
        var incidents = [];
        var limit = parseInt(this.getParameter('sysparm_limit'));
        if (!isNaN(limit) && limit > 0) { // Ensure 'limit' is a positive number
            var incidentGR = new GlideRecord('incident');
            incidentGR.orderByDesc('sys_created_on');
            incidentGR.setLimit(limit);
            incidentGR.query();
            while (incidentGR.next()) {
                var record = {};
                record.number = incidentGR.number.getDisplayValue(); // Ensuring correct field access
                record.sysID = incidentGR.sys_id.getDisplayValue();
                record.shortDescription = incidentGR.short_description.getDisplayValue();
                incidents.push(record);
            }
            return new JSON().encode(incidents);
        } else {
            return 'Invalid limit provided. Please provide a positive integer.';
        }
    },

    sayHello: function() {
        return 'Hello world!';
    },

    type: 'ServiceNow201GlideAjax'
});

Location:
    Client Scripts / New
Name:
    onLoadHello
Code:
    function onLoad() {
        var qa = new GlideAjax('ServiceNow201GlideAjax');
        qa.addParam('sysparm_name', 'sayHello');
        qa.getXML(ajaxProcessor);
    }

    function ajaxProcessor(response) {
        var answer = response.responseXML.documentElement.getAttribute('answer');
        g_form.setValue('short_description', answer);
    }

Location:
    UI Pages / New
Name:
    ServiceNow 201 GlideAjax Example 2
HTML:
    <?xml version="1.0" encoding="utf-8" ?>
    <j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
        <h1>Example 2</h1>
    </j:jelly>

Client Script:
var checkIncident = setInterval(function() {
    processRequest();
}, 5000);

function processRequest() {
    var qa = new GlideAjax('ServiceNow201GlideAjax');
    qa.addParam('sysparm_name', 'getIncidentStatus');
    qa.addParam('sysparm_incident_number', 'INC0010001');
    qa.getXML(ajaxProcessor);
}

function ajaxProcessor(response) {
    var answer = response.responseXML.documentElement.getAttribute('answer');
    console.log('Status: ' + answer);
}

Location:
    UI Pages / New
Name:
    ServiceNow 201 GlideAjax Example 3
HTML:
    <?xml version="1.0" encoding="utf-8" ?>
    <j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
        <h1>Example 3</h1>
    </j:jelly>

Client Script:
var qa = new GlideAjax('ServiceNow201GlideAjax');
qa.addParam('sysparm_limit', '5');
qa.getXML(ajaxProcessor);

function ajaxProcessor(response) {
    console.log('Response object:', response);  // Log the full response object for debugging
    var answer = response.responseXML.documentElement.getAttribute('answer');
    console.log('Answer:', answer);  // Log the answer JSON string
    try {
        var json = JSON.parse(answer);  // Safely parse the JSON string
        console.log('JSON:', json);  // Log the parsed JSON
        if (json.length > 0) {
            console.log('First incident\'s short description:', json[0].shortDescription);
        } else {
            console.log('No incidents returned.');
        }
    } catch (e) {
        console.error('Error parsing JSON:', e);  // Log parsing errors
    }
}


---------------------------------------------------------

