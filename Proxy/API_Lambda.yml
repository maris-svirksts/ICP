AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for a proxy service using API Gateway and Lambda with VPC configuration.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id
    Default: vpc-0897a9f3de7e213c0
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Id for the first private subnet
    Default: subnet-0698e2d7aa11f94ad
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Id for the second private subnet
    Default: subnet-0dc656e9fbe33dc5c
  ApiEndpoint:
    Type: String
    Description: The API endpoint to forward requests to.
    Default: lgas1grdoai01.openai.azure.com
  Environment:
    Type: String
    Description: Environment tag for the resources
    Default: sandbox

Resources:
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: growthos-discover-proxy-api
      Description: API Gateway for proxy service
      FailOnWarnings: true

  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: ANY
        Type: AWS_PROXY
        Uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProxyLambdaFunction.Arn}/invocations

  ProxyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'

  ProxyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt ProxyLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          'use strict';
          const https = require('https');

          exports.handler = async (event) => {
            const apiEndpoint = process.env.API_ENDPOINT;
            const path = event.pathParameters.proxy;
            const queryString = event.queryStringParameters 
              ? '?' + Object.entries(event.queryStringParameters).map(([key, value]) => `${key}=${value}`).join('&') 
              : '';
            const requestOptions = {
              hostname: apiEndpoint,
              path: `/${path}${queryString}`,
              method: event.httpMethod,
              headers: {
                ...event.headers,
                host: apiEndpoint
              }
            };

            return new Promise((resolve, reject) => {
              const req = https.request(requestOptions, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                  resolve({
                    statusCode: res.statusCode,
                    headers: res.headers,
                    body: data
                  });
                });
              });

              req.on('error', (error) => {
                reject({
                  statusCode: 500,
                  body: JSON.stringify({ message: 'Internal Server Error', error: error.message })
                });
              });

              if (event.body) {
                req.write(event.body);
              }
              req.end();
            });
          };
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          API_ENDPOINT: !Ref ApiEndpoint
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnetOne
          - !Ref PrivateSubnetTwo
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup

  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod
    DependsOn:
      - ApiGatewayMethod

Outputs:
  ApiEndpoint:
    Description: The API endpoint the proxy forwards requests to
    Value: !Ref ApiEndpoint

  Environment:
    Description: The environment tag value
    Value: !Ref Environment

  ApiGatewayInvokeURL:
    Description: Invoke URL for the API Gateway
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/{proxy+}"
