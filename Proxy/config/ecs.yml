ECSCluster:
  Type: AWS::ECS::Cluster

SecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: Enable NGINX access
    VpcId: 
      Ref: VPC
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
    SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0

ECSALB:
  Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  Properties:
    Scheme: internet-facing
    Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
    SecurityGroups:
      - Ref: SecurityGroup

ALBListener:
  Type: AWS::ElasticLoadBalancingV2::Listener
  Properties:
    DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
    LoadBalancerArn:
      Ref: ECSALB
    Port: 443
    Protocol: HTTPS
    Certificates:
      - CertificateArn: 
          Ref: Certificate

ALBTargetGroup:
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
  Properties:
    Port: 443
    Protocol: TCP
    VpcId:
      Ref: VPC
    TargetType: ip

ECSExecutionRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

ECSTaskDefinition:
  Type: AWS::ECS::TaskDefinition
  Properties:
    Family: nginx-proxy-task
    NetworkMode: awsvpc
    RequiresCompatibilities:
      - FARGATE
    Cpu: '512'
    Memory: '1024'
    ExecutionRoleArn:
      Fn::GetAtt:
        - ECSExecutionRole
        - Arn
    ContainerDefinitions:
      - Name: nginx-proxy
        Image:
          Fn::Join:
            - ''
            - - Ref: AWS::AccountId
              - .dkr.ecr.
              - ${self:provider.region}
              - .amazonaws.com/nginxProxy:latest
        Essential: true
        PortMappings:
          - ContainerPort: 443
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: /ecs/nginx-proxy
            awslogs-region: ${self:provider.region}
            awslogs-stream-prefix: nginx
        Environment:
          - Name: AZURE_SERVICE_URL
            Value: ${env:AZURE_SERVICE_URL}

ECSService:
  Type: AWS::ECS::Service
  Properties:
    Cluster:
      Ref: ECSCluster
    DesiredCount: 1
    TaskDefinition:
      Ref: ECSTaskDefinition
    LaunchType: FARGATE
    LoadBalancers:
      - ContainerName: nginx-proxy
        ContainerPort: 443
        TargetGroupArn:
          Ref: ALBTargetGroup
    NetworkConfiguration:
      AwsvpcConfiguration:
        AssignPublicIp: ENABLED
        Subnets:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2
        SecurityGroups:
          - Ref: SecurityGroup

Certificate:
  Type: AWS::CertificateManager::Certificate
  Properties:
    DomainName: elb.${self:provider.region}.amazonaws.com
    ValidationMethod: DNS

ECSAutoScalingPolicy:
  Type: AWS::ApplicationAutoScaling::ScalingPolicy
  Properties:
    PolicyName: ECSAutoScalingPolicy
    PolicyType: TargetTrackingScaling
    ScalingTargetId:
      Ref: ECSAutoScalingTarget
    TargetTrackingScalingPolicyConfiguration:
      TargetValue: 50.0
      PredefinedMetricSpecification:
        PredefinedMetricType: ECSServiceAverageCPUUtilization
      ScaleInCooldown: 300
      ScaleOutCooldown: 300

ECSAutoScalingTarget:
  Type: AWS::ApplicationAutoScaling::ScalableTarget
  Properties:
    MaxCapacity: 10
    MinCapacity: 1
    ResourceId:
      Fn::Join:
        - /
        - - service
          - Ref: ECSCluster
          - Ref: ECSService
    RoleARN:
      Fn::GetAtt:
        - ECSAutoScalingRole
        - Arn
    ScalableDimension: ecs:service:DesiredCount
    ServiceNamespace: ecs

ECSAutoScalingRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
          Action: sts:AssumeRole
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscalePolicy
