Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: ${self:custom.vpcCidrBlock}
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: nginx-proxy-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: nginx-proxy-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: ${self:custom.publicSubnetCidr1}
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: nginx-proxy-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: ${self:custom.publicSubnetCidr2}
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: nginx-proxy-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: ${self:custom.privateSubnetCidr1}
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: nginx-proxy-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: ${self:custom.privateSubnetCidr2}
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: nginx-proxy-private-subnet-2

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - ElasticIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: nginx-proxy-route-table

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: RouteTable

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: RouteTable

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: RouteTable

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: RouteTable

  ECSCluster:
    Type: AWS::ECS::Cluster

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable NGINX access
      VpcId: 
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups:
        - Ref: SecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ECSALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: 
            Ref: Certificate

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: TCP
      VpcId:
        Ref: VPC
      TargetType: ip

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: nginx-proxy-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn:
        Fn::GetAtt:
          - ECSExecutionRole
          - Arn
      ContainerDefinitions:
        - Name: nginx-proxy
          Image:
            Fn::Join:
              - ''
              - - Ref: AWS::AccountId
                - .dkr.ecr.
                - ${self:provider.region}
                - .amazonaws.com/nginxProxy:latest
          Essential: true
          PortMappings:
            - ContainerPort: 443
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/nginx-proxy
              awslogs-region: ${self:provider.region}
              awslogs-stream-prefix: nginx
          Environment:
            - Name: AZURE_SERVICE_URL
              Value: ${env:AZURE_SERVICE_URL}

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: 1
      TaskDefinition:
        Ref: ECSTaskDefinition
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: nginx-proxy
          ContainerPort: 443
          TargetGroupArn:
            Ref: ALBTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Ref: PrivateSubnet1
            - Ref: PrivateSubnet2
          SecurityGroups:
            - Ref: SecurityGroup

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: elb.${self:provider.region}.amazonaws.com
      ValidationMethod: DNS

  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Join:
          - /
          - - service
            - Ref: ECSCluster
            - Ref: ECSService
      RoleARN:
        Fn::GetAtt:
          - ECSAutoScalingRole
          - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscalePolicy

  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:service}-logging-bucket
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Enabled

  LoadBalancerLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: 
        Ref: LoggingBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "delivery.logs.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: LoggingBucket
                  - "/*"

  TaskLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/nginx-proxy
      RetentionInDays: 30

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/ecs/nginx-proxy:*

  CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ECSHighCPUUtilization
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value:
            Ref: ECSCluster
        - Name: ServiceName
          Value:
            Ref: ECSService
      AlarmActions:
        - Ref: AlarmNotificationTopic

  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ECSAlarmNotificationTopic

  AlarmNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: ${env:ALARM_EMAIL}
      Protocol: email
      TopicArn:
        Ref: AlarmNotificationTopic
