AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless proxy setup using API Gateway and Lambda.

Parameters:
  ApiName:
    Type: String
    Default: proxy-api
    Description: Name of the API Gateway

Resources:
  ProxyApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Ref ApiName

  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ProxyApi.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref ProxyApi

  ProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref ProxyApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProxyLambdaFunction.Arn}/invocations

  ProxyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Code:
        ZipFile: |
          const https = require('https');

          exports.handler = async (event) => {
            const options = {
              hostname: event.headers['Host'],
              port: 443,
              path: event.path,
              method: event.httpMethod,
              headers: event.headers,
            };

            return new Promise((resolve, reject) => {
              const req = https.request(options, (res) => {
                let body = '';
                res.on('data', (chunk) => {
                  body += chunk;
                });
                res.on('end', () => {
                  resolve({
                    statusCode: res.statusCode,
                    headers: res.headers,
                    body: body,
                  });
                });
              });

              req.on('error', (e) => {
                reject({
                  statusCode: 500,
                  body: 'Error: ' + e.message,
                });
              });

              if (event.body) {
                req.write(event.body);
              }
              req.end();
            });
          };

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  ApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ProxyLambdaFunction.Arn
      Principal: apigateway.amazonaws.com

Outputs:
  ApiEndpoint:
    Description: "URL of the API Gateway"
    Value: !Sub "https://${ProxyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/{proxy+}"
