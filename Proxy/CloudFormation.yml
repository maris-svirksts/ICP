AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for a Fargate-based proxy service with load balancers, streaming protocol support, CloudWatch logging, and Elastic IP.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id
  SubnetOne:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Id for the first subnet
  SubnetTwo:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Id for the second subnet
  OpenAIInstanceIP:
    Type: String
    Description: IP address of the OpenAI instance

Resources:
  ElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/ecs/proxy-service
      RetentionInDays: 7

  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties: 
      ClusterName: proxy-cluster

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: proxy-task
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: proxy-container
          Image: nginx
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
            - ContainerPort: 443
              Protocol: tcp
            - ContainerPort: 1935 # Common port for RTMP streaming
              Protocol: tcp
          Environment:
            - Name: OPENAI_INSTANCE_IP
              Value: !Ref OpenAIInstanceIP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /aws/ecs/proxy-service
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: proxy
          Command:
            - /bin/sh
            - -c
            - |
              echo '
              server {
                  listen 80;
                  location / {
                      proxy_pass https://3nfgzb9txa.execute-api.eu-west-1.amazonaws.com/proxy; # $OPENAI_INSTANCE_IP - Replace with variable once move to Serverless
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
              }
              ' > /etc/nginx/conf.d/default.conf &&
              nginx -g 'daemon off;'

  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetOne
            - !Ref SubnetTwo
          SecurityGroups:
            - !Ref SecurityGroup

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS and streaming protocols
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1935
          ToPort: 1935
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: proxy-lb
      Subnets:
        - !Ref SubnetOne
        - !Ref SubnetTwo
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: proxy-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      HealthCheckPath: /
      Matcher:
        HttpCode: '200'
      TargetType: ip

  ListenerHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  #ListenerHTTPS:
  #  Type: 'AWS::ElasticLoadBalancingV2::Listener'
  #  Properties:
  #    DefaultActions:
  #      - Type: forward
  #        TargetGroupArn: !Ref TargetGroup
  #    LoadBalancerArn: !Ref LoadBalancer
  #    Port: 443
  #    Protocol: HTTPS
  #    SslPolicy: ELBSecurityPolicy-2016-08
  #    Certificates:
  #      - CertificateArn: <your-certificate-arn> # Replace with your ACM certificate ARN

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName

  ElasticIP:
    Description: The allocated Elastic IP
    Value: !Ref ElasticIP
