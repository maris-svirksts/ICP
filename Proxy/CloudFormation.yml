AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for a Fargate-based proxy service with Network Load Balancer, streaming protocol support, CloudWatch logging, and Elastic IP.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id
    Default: vpc-0897a9f3de7e213c0 # growthos-discover-data-sandbox-vpc
  SubnetOne:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Id for the first subnet
    Default: subnet-01c1e6167c10cd939 # growthos-discover-data-sandbox-vpc GWDATAPublicSubnet1
  SubnetTwo:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Id for the second subnet
    Default: subnet-0ab49b33aca6b7531 # growthos-discover-data-sandbox-vpc GWDATAPublicSubnet2
  ApiEndpoint:
    Type: String
    Description: The API endpoint to forward requests to.
    Default: 3nfgzb9txa.execute-api.eu-west-1.amazonaws.com # Replace with live endpoint
  Environment:
    Type: String
    Description: Environment tag for the resources
    Default: sandbox

Resources:
  ElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ProxyElasticIP
        - Key: growthos:environment
          Value: !Ref Environment

  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      Tags:
        - Key: growthos:environment
          Value: !Ref Environment

  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/ecs/proxy-service
      RetentionInDays: 7
      Tags:
        - Key: growthos:environment
          Value: !Ref Environment

  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties: 
      ClusterName: proxy-cluster
      Tags:
        - Key: growthos:environment
          Value: !Ref Environment

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: proxy-task
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: proxy-container
          Image: nginx
          Essential: true
          PortMappings:
            - ContainerPort: 443
              Protocol: tcp
            - ContainerPort: 1935
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /aws/ecs/proxy-service
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: proxy
          Environment:
            - Name: API_ENDPOINT
              Value: !Ref ApiEndpoint
          Command:
            - /bin/sh
            - -c
            - |
              cat <<EOF > /etc/nginx/nginx.conf
              events {}
              stream {
                  log_format main '\$remote_addr [\$time_local] "\$protocol" '
                                    '\$status \$bytes_sent "\$session_time" '
                                    '"\$upstream_addr" "\$upstream_bytes_sent" "\$upstream_connect_time"';
                  access_log /dev/stdout main;
                  error_log /dev/stderr warn;
                  upstream backend_https {
                      server ${API_ENDPOINT}:443;
                  }
                  upstream backend_rtmp {
                      server ${API_ENDPOINT}:1935;
                  }
                  server {
                      listen 443;
                      proxy_pass backend_https;
                  }
                  server {
                      listen 1935;
                      proxy_pass backend_rtmp;
                  }
              }
              EOF
              nginx -g 'daemon off;'

  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetOne
            - !Ref SubnetTwo
          SecurityGroups:
            - !Ref SecurityGroup
      Tags:
        - Key: growthos:environment
          Value: !Ref Environment

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTPS and RTMP
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1935
          ToPort: 1935
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: growthos:environment
          Value: !Ref Environment

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: proxy-nlb
      Subnets:
        - !Ref SubnetOne
        - !Ref SubnetTwo
      Scheme: internet-facing
      Type: network
      Tags:
        - Key: growthos:environment
          Value: !Ref Environment

  TargetGroupHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: proxy-target-group-https
      Port: 443
      Protocol: TCP
      VpcId: !Ref VpcId
      HealthCheckProtocol: TCP
      HealthCheckPort: '443'
      TargetType: ip
      Tags:
        - Key: growthos:environment
          Value: !Ref Environment

  TargetGroupRTMP:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: proxy-target-group-rtmp
      Port: 1935
      Protocol: TCP
      VpcId: !Ref VpcId
      HealthCheckProtocol: TCP
      HealthCheckPort: '1935'
      TargetType: ip
      Tags:
        - Key: growthos:environment
          Value: !Ref Environment

  ListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupHTTPS
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: TCP

  ListenerRTMP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupRTMP
      LoadBalancerArn: !Ref LoadBalancer
      Port: 1935
      Protocol: TCP

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName

  ElasticIP:
    Description: The allocated Elastic IP
    Value: !Ref ElasticIP

  ApiEndpoint:
    Description: The API endpoint the proxy forwards requests to
    Value: !Ref ApiEndpoint

  Environment:
    Description: The environment tag value
    Value: !Ref Environment
