AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for a Fargate-based end-to-end encrypted proxy service with Network Load Balancer, streaming protocol support, and CloudWatch logging.

Metadata:
  Author: Maris Svirksts
  Version: 1.3
  Date: 2024-06-21

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id
    Default: vpc-0897a9f3de7e213c0
  PublicSubnetOne:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Id for the first public subnet
    Default: subnet-01c1e6167c10cd939
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Id for the second public subnet
    Default: subnet-0ab49b33aca6b7531
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Id for the first private subnet
    Default: subnet-0698e2d7aa11f94ad
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Id for the second private subnet
    Default: subnet-0dc656e9fbe33dc5c
  ApiEndpoint:
    Type: String
    Description: The API endpoint to forward requests to.
    Default: lgas1grdoai01.openai.azure.com
  Environment:
    Type: String
    Description: Environment tag for the resources
    Default: sandbox
  HealthCheckInterval:
    Type: Number
    Description: Interval for health checks in seconds, should not be larger than 300
    Default: 300
  ContainerImage:
    Type: String
    Description: Container image for the proxy service
    Default: nginx:latest
  CertificateArn:
    Type: String
    Description: ACM Certificate ARN for HTTPS (empty/ACM certificate ARN)
    Default: "arn:aws:acm:eu-west-1:155258020391:certificate/93583b08-9315-4458-a229-ef1c2ae0193b"
    AllowedPattern: "^$|arn:aws:acm:[^:]+:[0-9]{12}:certificate/.+"
    ConstraintDescription: Must be a valid ACM certificate ARN or an empty string.

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]

Resources:
  # IAM Role for ECS Task Execution
  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ecs/growthos-proxy-service:*"

  # CloudWatch Log Group
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/ecs/growthos-proxy-service
      RetentionInDays: 7

  # ECS Cluster
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties: 
      ClusterName: growthos-discover-proxy-cluster

  # Application Load Balancer
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: growthos-discover-proxy-alb
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      Scheme: internet-facing
      Type: application

  # Target Group for HTTPS
  TargetGroupHttps:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: growthos-discover-proxy-https
      Port: 443
      Protocol: HTTPS
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTPS
      HealthCheckPort: '443'
      HealthCheckIntervalSeconds: !Ref HealthCheckInterval
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip

  # Load Balancer Listener for HTTPS with SSL Certificate
  ListenerHttps:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupHttps
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn

  # Security Group
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTPS
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # ECS Task Definition
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: growthos-discover-proxy-task
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: proxy-container
          Image: !Ref ContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: 443
              Protocol: TCP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /aws/ecs/growthos-proxy-service
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: proxy
          Environment:
            - Name: API_ENDPOINT
              Value: !Ref ApiEndpoint
          Command:
            - /bin/sh
            - -c
            - |
              cat <<EOF > /etc/nginx/nginx.conf
              worker_processes 1;
              error_log /dev/stderr warn;

              events { worker_connections 1024; }

              http {
                  log_format main '\$remote_addr [\$time_local] "\$request" '
                                    '\$status \$body_bytes_sent "\$http_referer" '
                                    '"\$http_user_agent" "\$http_x_forwarded_for"';
                  access_log /dev/stdout main;

                  upstream backend_https {
                      server ${API_ENDPOINT}:443;
                      keepalive 32;
                  }

                  server {
                      listen 443 ssl;
                      ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
                      ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
                      ssl_protocols TLSv1.2 TLSv1.3;
                      ssl_ciphers 'HIGH:!aNULL:!MD5';

                      location / {
                          proxy_pass https://backend_https;
                          proxy_set_header Host \$host;
                          proxy_set_header X-Real-IP \$remote_addr;
                          proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto \$scheme;
                          proxy_ssl_verify off;
                      }
                  }
              }
              EOF
              nginx -g 'daemon off;'

  # ECS Service
  ProxyService:
    Type: 'AWS::ECS::Service'
    DependsOn: LoadBalancer
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 60
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: proxy-container
          ContainerPort: 443
          TargetGroupArn: !Ref TargetGroupHttps
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PrivateSubnetOne
            - !Ref PrivateSubnetTwo
          SecurityGroups:
            - !Ref SecurityGroup

Outputs:
  LoadBalancerDnsName:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName

  ApiEndpoint:
    Description: The API endpoint the proxy forwards requests to
    Value: !Ref ApiEndpoint

  Environment:
    Description: The environment tag value
    Value: !Ref Environment

  HealthCheckInterval:
    Description: Interval for health checks in seconds
    Value: !Ref HealthCheckInterval
